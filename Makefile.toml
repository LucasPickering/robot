env_files = ["./robot.env"]

[env]
# Put cross-built artifacts in a different dir, so they don't fight rust-analyzer
CROSS_BUILD_DIR = "target_cross"
DEST_DIR = "~/robot"
TARGET = "armv7-unknown-linux-gnueabihf"

[env.development]
BIN_PATH = "${CROSS_BUILD_DIR}/${TARGET}/debug/robot"

[env.release]
# TODO make this actually do a release build
BIN_PATH = "${CROSS_BUILD_DIR}/${TARGET}/release/robot"

# Build docker image that we use for cross-compiling
[tasks.build-image]
args = ["build", "-t", "robot-build", "."]
command = "docker"

# Build rust code
[tasks.build]
args = ["build", "--target", "${TARGET}", "--target-dir", "${PWD}/${CROSS_BUILD_DIR}"]
command = "cross"
dependencies = ["build-image"]
install_crate = {crate_name = "cargo-cross", binary = "cross", test_arg = ["--help"]}

# Run rustfmt
[tasks.fmt]
# Formatting requires nightly for experimental settings
args = ["+nightly", "fmt"]
command = "cargo"

# Open an SSH session on the robot host
[tasks.ssh]
args = ["${ROBOT_HOST}", "${@}"]
command = "ssh"

# Make the destination directory on the robot host
[tasks.mkdir]
args = ["${ROBOT_HOST}", "mkdir -p ${DEST_DIR}"]
command = "ssh"

# Copy the config and executable to the robot host
[tasks.deploy]
dependencies = ["build", "mkdir"]
script = ["rsync -r ${BIN_PATH} config ${ROBOT_HOST}:${DEST_DIR}/./"]

# Run the program on the robot host
[tasks.run]
args = ["${ROBOT_HOST}", "${DEST_DIR}/robot", "${DEST_DIR}/config/default.toml"]
command = "ssh"
dependencies = ["deploy"]

# Watch source and when it changes, build+copy+run the program
[tasks.watch]
args = ["watch", "-w", "Cargo.toml", "-w", "config/", "-w", "src/", "-x", "make run"]
command = "cargo"
install_crate = {crate_name = "cargo-watch", binary = "cargo", test_arg = ["watch", "--help"]}
